###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "pk.9c09b0bd2a62e58a17bee064face22e2"
geocoded_data <- locationiq_geocode(address, api_key)
geocoded_data <- as_tibble(do.call(rbind, lapply(df$address, locationiq_geocode, api_key = "pk.9c09b0bd2a62e58a17bee064face22e2")))
library(httr)
geocoded_data <- as_tibble(do.call(rbind, lapply(df$address, locationiq_geocode, api_key = "pk.9c09b0bd2a62e58a17bee064face22e2")))
View(geocoded_data)
geocoded_data <- locationiq_geocode(df$address, api_key)
geocoded_data <- locationiq_geocode(df$address[1], api_key)
View(geocoded_data)
locationiq_geocode(df$address[1], api_key)
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "pk.9c09b0bd2a62e58a17bee064face22e2"
geocoded_data <- locationiq_geocode(df$address[1], api_key)
geocoded_data
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Make the API request
response <- GET(url = base_url, query = params)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "pk.9c09b0bd2a62e58a17bee064face22e2"
geocoded_data <- locationiq_geocode(df$address[1], api_key)
geocoded_data
locationiq_geocode(df$address[1], api_key)
df$address
locationiq_geocode("Buckingham Palace, London, UK", api_key)
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Make the API request
response <- GET(url = base_url, query = params)
# Print the API request URL (for debugging)
cat("API Request URL:", url, "\n")
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Make the API request
response <- GET(url = base_url, query = params)
# Print the API request URL (for debugging)
cat("API Request URL:", url, "\n")
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "pk.9c09b0bd2a62e58a17bee064face22e2"
geocoded_data <- locationiq_geocode(df$address[1], api_key)
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Make the API request
response <- GET(url = base_url, query = params)
# Print the API request URL (for debugging)
cat("API Request URL:", base_url, "\n")
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "pk.9c09b0bd2a62e58a17bee064face22e2"
geocoded_data <- locationiq_geocode(df$address[1], api_key)
locationiq_geocode(df$address[1], api_key)
df$address[1]
print(response)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Construct the API request URL
api_url <- modify_url(base_url, query = params)
# Print the API request URL
cat("API Request URL:", api_url, "\n")
# Make the API request
response <- GET(url = api_url)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
return(data.frame(
lat = as.numeric(result$lat),
lon = as.numeric(result$lon),
address = result$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
geocoded_data <- locationiq_geocode(df$address[1], api_key)
# Function for geocoding using LocationIQ
locationiq_geocode <- function(address, api_key) {
base_url <- "https://us1.locationiq.com/v1/search.php"
# Define parameters
params <- list(
q = address,
key = api_key,
format = "json"
)
# Construct the API request URL
url <- modify_url(base_url, query = params)
# Print the API request URL (for debugging)
cat("API Request URL:", url, "\n")
# Make the API request
response <- GET(url = url)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (length(result) > 0) {
# Extract the first match (you can modify this to handle multiple matches)
first_match <- result[[1]]
return(data.frame(
lat = as.numeric(first_match$lat),
lon = as.numeric(first_match$lon),
address = first_match$display_name
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, address = NA))
}
locationiq_geocode(df$address[1], api_key)
geocoded_data <- as_tibble(do.call(rbind, lapply(df$address, locationiq_geocode, api_key = "pk.9c09b0bd2a62e58a17bee064face22e2")))
View(geocoded_data)
View(geocoded_data)
View(df)
# Function for geocoding using LocationIQ
google_geocode <- function(address, api_key) {
base_url <- "https://maps.googleapis.com/maps/api/geocode/json"
# Define parameters
params <- list(
address = address,
key = api_key
)
# Make the API request
response <- GET(url = base_url, query = params)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (result$status == "OK" && length(result$results) > 0) {
# Extract the first result
first_result <- result$results[[1]]
return(data.frame(
lat = as.numeric(first_result$geometry$location$lat),
lon = as.numeric(first_result$geometry$location$lng),
formatted_address = first_result$formatted_address
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, formatted_address = NA))
}
# Function for geocoding using LocationIQ
google_geocode <- function(address, api_key) {
base_url <- "https://maps.googleapis.com/maps/api/geocode/json"
# Define parameters
params <- list(
address = address,
key = api_key
)
# Make the API request
response <- GET(url = base_url, query = params)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (result$status == "OK" && length(result$results) > 0) {
# Extract the first result
first_result <- result$results[[1]]
return(data.frame(
lat = as.numeric(first_result$geometry$location$lat),
lon = as.numeric(first_result$geometry$location$lng),
formatted_address = first_result$formatted_address
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, formatted_address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "AIzaSyCMj61LeNpnarwxc-gSZ-YREXqwgFi8y0M"
google_geocode(df$address[1], api_key)
address <- "123 Main St, City, Country"
geocoded_data <- google_geocode(address, api_key)
google_geocode(address, api_key)
address = "Buckingham Palace, London UK"
google_geocode(address, api_key)
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "AIzaSyCMj61LeNpnarwxc-gSZ-YREXqwgFi8y0M"
google_geocode(address, api_key)
google_geocode(address, api_key)
google_geocode(df$address[1], api_key)
geocoded_data <- sapply(df$address, google_geocode, api_key)
geocoded_data_df <- as.data.frame(t(geocoded_data))
View(geocoded_data_df)
df<-cbind(df,geocoded_data) %>%
mutate(lat = as.numeric(lat),
lon = as.numeric(lon),
)
df<-cbind(df,geocoded_data)
df<-cbind(df,geocoded_data_df) %>%
mutate(lat = as.numeric(lat),
lon = as.numeric(lon),
)
View(df)
View(geocoded_data_df)
cbind(df,geocoded_data_df)
df<-cbind(df,geocoded_data_df)
View(df)
###################################
# Add list of addresses here
###################################
df<-tibble(
address = c(
"49 Brook Rd, Bassingbourn, UK",
"15 High St, Bassingbourn, UK",
"27 High St, Bassingbourn, UK",
"12 High St, Bassingbourn, UK",
"38 High St, Bassingbourn, Royston SG8 5LD",
"13 Causeway, Bassingbourn, UK",
"24 Mill Ln, Bassingbourn, Royston SG8 5PR",
"24a Old North Road, Bassingbourn, UK",
"14 Park View, Bassingbourn, Royston SG8 5PS",
"22 Park View, Bassingbourn, UK",
"88 Spring Lane, Bassingbourn, UK",
"24 Windmill Close, Bassingbourn, UK",
"13 Windmill Close, Bassingbourn, UK",
"2 Tanyard, Bassingbourn, UK",
"2 Walnut Tree Close, Bassingbourn, UK",
"45 Elm Tree Drive, Bassingbourn, UK"
),
number = c(1,2,3,10,14,4,5,6,13,15,16,7,12,8,9,11)
)
google_geocode <- function(address, api_key) {
base_url <- "https://maps.googleapis.com/maps/api/geocode/json"
# Define parameters
params <- list(
address = address,
key = api_key
)
# Make the API request
response <- GET(url = base_url, query = params)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (result$status == "OK" && length(result$results) > 0) {
# Extract the first result
first_result <- result$results[[1]]
return(data.frame(
lat = as.numeric(first_result$geometry$location$lat),
lon = as.numeric(first_result$geometry$location$lng),
formatted_address = first_result$formatted_address
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, formatted_address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "AIzaSyCMj61LeNpnarwxc-gSZ-YREXqwgFi8y0M"
geocoded_data <- sapply(df$address, google_geocode, api_key)
geocoded_data_df <- as.data.frame(t(geocoded_data))
cbind(df,geocoded_data_df)
View(geocoded_data_df)
df<-cbind(df,geocoded_data_df)%>%
mutate(lat = as.numeric(lat),
lon = as.numeric(lon),
)
# Create a Leaflet map with snowflake markers using numbers as labels
map <- leaflet(df) %>%
addTiles() %>%
addMarkers(
icon = makeIcon(iconUrl = "https://images.vexels.com/media/users/3/128626/isolated/preview/f30fc1dda925b2ceeaef55263ef85b8a-red-xmas-snowflake-by-vexels.png",
iconWidth = 25, iconHeight = 25),
label = ~as.character(df$address),
labelOptions = labelOptions(
noHide = F),)  # Permanent labels
map
df <- df %>% arrange(as.numeric(number))
kable(select(df, number, address), "html", row.names = FALSE) %>%
kable_styling("striped", full_width = FALSE) %>%
scroll_box(width = "100%", height = "300px")  # Optional: Add a scroll box if needed
library(tidyverse)
library(ggmap)
library(jsonlite)  # Load the jsonlite package
library(leaflet)
library(DT)
library(knitr)
library(kableExtra)
library(httr)
###################################
# Add list of addresses here
###################################
df<-tibble(
address = c(
"49 Brook Rd, Bassingbourn, UK",
"15 High St, Bassingbourn, UK",
"27 High St, Bassingbourn, UK",
"12 High St, Bassingbourn, UK",
"38 High St, Bassingbourn, UK",
"13 Causeway, Bassingbourn, UK",
"24 Mill Ln, Bassingbourn, UK",
"24a Old North Road, Bassingbourn, UK",
"14 Park View, Bassingbourn, UK",
"22 Park View, Bassingbourn, UK",
"88 Spring Lane, Bassingbourn, UK",
"24 Windmill Close, Bassingbourn, UK",
"13 Windmill Close, Bassingbourn, UK",
"2 Tanyard, Bassingbourn, UK",
"2 Walnut Tree Close, Bassingbourn, UK",
"45 Elm Tree Drive, Bassingbourn, UK"
),
number = c(1,2,3,10,14,4,5,6,13,15,16,7,12,8,9,11)
)
###################################
# Function for geocoding using LocationIQ
###################################
google_geocode <- function(address, api_key) {
base_url <- "https://maps.googleapis.com/maps/api/geocode/json"
# Define parameters
params <- list(
address = address,
key = api_key
)
# Make the API request
response <- GET(url = base_url, query = params)
# Check if the request was successful
if (http_status(response)$category == "Success") {
result <- content(response, "parsed")
if (result$status == "OK" && length(result$results) > 0) {
# Extract the first result
first_result <- result$results[[1]]
return(data.frame(
lat = as.numeric(first_result$geometry$location$lat),
lon = as.numeric(first_result$geometry$location$lng),
formatted_address = first_result$formatted_address
))
}
} else {
# Print the error message (for debugging)
error_message <- content(response, "text")
cat("Geocoding error:", error_message, "\n")
}
# Return NA values if no result or an error occurred
return(data.frame(lat = NA, lon = NA, formatted_address = NA))
}
###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- "AIzaSyCMj61LeNpnarwxc-gSZ-YREXqwgFi8y0M"
geocoded_data <- sapply(df$address, google_geocode, api_key)
geocoded_data_df <- as.data.frame(t(geocoded_data))
df<-cbind(df,geocoded_data_df)%>%
mutate(lat = as.numeric(lat),
lon = as.numeric(lon),
)
###################################
# Draw a leaflet map
###################################
# Create a Leaflet map with snowflake markers using numbers as labels
map <- leaflet(df) %>%
addTiles() %>%
addMarkers(
icon = makeIcon(iconUrl = "https://images.vexels.com/media/users/3/128626/isolated/preview/f30fc1dda925b2ceeaef55263ef85b8a-red-xmas-snowflake-by-vexels.png",
iconWidth = 25, iconHeight = 25),
label = ~as.character(df$address),
labelOptions = labelOptions(
noHide = F),)  # Permanent labels
# Display the map
