---
title: "Bassingbourn Xmas Trail 2023"
format: html
editor: visual
---

```{r,warning=F,message=F,echo=F}
library(tidyverse)
library(ggmap)
library(jsonlite)  # Load the jsonlite package
library(leaflet)
library(DT)
library(knitr)
library(kableExtra)
library(httr)


###################################
# Add list of addresses here
###################################
df<-tibble(
  address = c(
    "49 Brook Rd, Bassingbourn, UK",
    "15 High St, Bassingbourn, UK",
    "27 High St, Bassingbourn, UK",
    "12 High St, Bassingbourn, UK",
    "38 High St, Bassingbourn, UK",
    "13 Causeway, Bassingbourn, UK",
    "24 Mill Ln, Bassingbourn, UK",
    "24a Old North Road, Bassingbourn, UK",
    "14 Park View, Bassingbourn, UK",
    "22 Park View, Bassingbourn, UK",
    "88 Spring Lane, Bassingbourn, UK",
    "24 Windmill Close, Bassingbourn, UK",
    "13 Windmill Close, Bassingbourn, UK",
    "2 Tanyard, Bassingbourn, UK",
    "2 Walnut Tree Close, Bassingbourn, UK",
    "45 Elm Tree Drive, Bassingbourn, UK",
    "2 Appletree Row, Bassingbourn, UK",
    "62 Spring Lane, Bassingbourn, UK",
    "38 Tower Close, Bassingbourn, UK"
  ),
  number = c(1,2,3,10,14,4,5,6,13,15,16,7,12,8,9,11,17,18,19)
  )

###################################
# Function for geocoding using LocationIQ
###################################

google_geocode <- function(address, api_key) {
  base_url <- "https://maps.googleapis.com/maps/api/geocode/json"
  
  # Define parameters
  params <- list(
    address = address,
    key = api_key
  )
  
  # Make the API request
  response <- GET(url = base_url, query = params)
  
  # Check if the request was successful
  if (http_status(response)$category == "Success") {
    result <- content(response, "parsed")
    if (result$status == "OK" && length(result$results) > 0) {
      # Extract the first result
      first_result <- result$results[[1]]
      
      return(data.frame(
        lat = as.numeric(first_result$geometry$location$lat),
        lon = as.numeric(first_result$geometry$location$lng),
        formatted_address = first_result$formatted_address
      ))
    }
  } else {
    # Print the error message (for debugging)
    error_message <- content(response, "text")
    cat("Geocoding error:", error_message, "\n")
  }
  
  # Return NA values if no result or an error occurred
  return(data.frame(lat = NA, lon = NA, formatted_address = NA))
}


###################################
# Get the geocodes for the addresses and bind to original tibble
###################################
api_key <- ""
geocoded_data <- sapply(df$address, google_geocode, api_key)
geocoded_data_df <- as.data.frame(t(geocoded_data))


df<-cbind(df,geocoded_data_df)%>% 
  mutate(lat = as.numeric(lat),
         lon = as.numeric(lon),
         
         )

###################################
# Draw a leaflet map
###################################

# Create a Leaflet map with snowflake markers using numbers as labels
map <- leaflet(df) %>%
    addTiles() %>% 
  addMarkers(
    icon = makeIcon(iconUrl = "https://images.vexels.com/media/users/3/128626/isolated/preview/f30fc1dda925b2ceeaef55263ef85b8a-red-xmas-snowflake-by-vexels.png", 
                    iconWidth = 25, iconHeight = 25),
    label = ~as.character(df$address),
    labelOptions = labelOptions(
      noHide = F),)  # Permanent labels


# Display the map


```

```{r,echo=F}
map
```

```{r,echo=F}
df <- df %>% arrange(as.numeric(number))

kable(select(df, number, address), "html", row.names = FALSE) %>%
  kable_styling("striped", full_width = FALSE) %>%
  scroll_box(width = "100%", height = "300px")  # Optional: Add a scroll box if needed

```
